<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the MCS using camel as a routing engine -->
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	   xmlns:camel="http://camel.apache.org/schema/spring"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   					   http://www.springframework.org/schema/beans/spring-beans.xsd
	   					   http://www.springframework.org/schema/context 
	   					   http://www.springframework.org/schema/context/spring-context-3.0.xsd
	   					   http://www.springframework.org/schema/data/mongo 
	   					   http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
	   					   http://camel.apache.org/schema/spring 
	   					   http://camel.apache.org/schema/spring/camel-spring.xsd">

	<import resource="spring-config.xml"/>
	<import resource="activemq.xml"/>
	<import resource="activemq-egse.xml"/>
	
	
	<!-- The xtce space system model factory. Creates the model given an xtce xml file -->
	<bean id="ssmodelFactory" class="org.hbird.core.xtce.XtceSpaceSystemModelFactory">
		<constructor-arg value="${thunderbird.xtce.file}"></constructor-arg>
	</bean>
	
	<!-- The actual mode produced by the factory -->
	<bean id="ssmodel" factory-bean="ssmodelFactory" factory-method="createSpaceSystemModel">
	</bean>
	
	<!-- Model publisher. -->
	<bean id="publisher" class="org.hbird.core.spacesystempublisher.publishing.InMemorySpaceSystemPublisher">
		<property name="model" ref="ssmodel"></property>
	</bean>
	
	<!--  Use the factory to get data required by the payload codec -->
	<bean id="parameterGroups" factory-bean="publisher" factory-method="getParameterGroups"></bean>
	<bean id="encodings" factory-bean="publisher" factory-method="getEncodings"></bean>
	<bean id="restrictions" factory-bean="publisher" factory-method="getRestrictions"></bean>
	
	
	
	<bean id="frameDecoder" class="org.hbird.transport.protocols.ccsds.transferframe.CcsdsFrameDecoder">
		<constructor-arg><value>30</value></constructor-arg>
        <constructor-arg><value>false</value></constructor-arg>
        <constructor-arg><value>false</value></constructor-arg>
	</bean>
	
	<bean id="packetDecoder" class="org.hbird.transport.protocols.ccsds.spacepacket.CcsdsPacketDecoder" />
	
	
	<bean id="payload-codec" class="org.hbird.transport.payloadcodec.InMemoryPayloadCodec">
		<constructor-arg ref="parameterGroups"></constructor-arg>
		<constructor-arg ref="encodings"></constructor-arg>
		<constructor-arg ref="restrictions"></constructor-arg>
	</bean>
	
	
	
	<context:component-scan base-package="org.hbird.application.parameterarchive.mongodb" />

	<mongo:mongo host="${mongodb.host}" port="${mongodb.port}" />

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg ref="mongo" />
		<constructor-arg name="databaseName" value="${mongodb.parc.db.name}" />
	</bean>
	
	<mongo:repositories 
		base-package="org.hbird.application.parameterarchive.repositories" mongo-template-ref="mongoTemplate">
	</mongo:repositories>

	<bean id="parameterArchiver" class="org.hbird.application.parameterarchive.mongodb.SimpleMongoParameterArchiver">
		<property name="collection" value="${mongodb.parc.db.collection.name}"></property>
	</bean>

	<bean id="parameterRetriever" class="org.hbird.application.parameterarchive.mongodb.SimpleMongoParameterRetriever">
		<property name="collection" value="${mongodb.parc.db.collection.name}"></property>
	</bean>
	
	
	<!-- To translate any MongoExceptions thrown in @Repository annotated classes -->
	<context:annotation-config />
	
	<!-- THE ROUTES - The core wiring of the system -->
	<camelContext xmlns="http://camel.apache.org/schema/spring">
		<camel:route>
			<camel:from uri="activemq:requestParameterGroups"></camel:from>
			<camel:to uri="bean:publisher?method=getParameterGroupList"></camel:to>
		</camel:route>
		
		<camel:route>
			<camel:from uri="activemq:requestCommands"></camel:from>
			<camel:to uri="bean:publisher?method=getCommandList"></camel:to>
		</camel:route>
		
		<camel:route>
			<camel:from uri="activemq:requestArchivedParametersByQualifiedName"></camel:from>
			<camel:to uri="bean:parameterRetriever?method=findParameters"></camel:to>
		</camel:route>
		
		<camel:route>
			<camel:from uri="activemq:requestArchivedParametersByReceivedTime"></camel:from>
			<camel:to uri="bean:parameterRetriever?method=findParameters(${body[0]},${body[1]})"></camel:to>
		</camel:route>
		
		<camel:route>
			<camel:from uri="activemq:findByReceivedTimeBetween"></camel:from>
			<camel:to uri="bean:parameterRetriever?method=findByReceivedTimeBetween(${body[0]},${body[1]},${body[2]},${body[3]})"></camel:to>
		</camel:route>
		
		<camel:route>
<!-- 			<camel:from uri="activemq-egse:slipstream"/> -->
			<camel:from uri="file:///tmp/strand/"/>
			<camel:convertBodyTo type="byte[]" />
			<camel:to uri="frameDecoder" />
			<camel:to uri="packetDecoder" />
			<camel:split>
				<camel:simple>${body}</camel:simple>
				<convertBodyTo type="org.hbird.core.commons.data.GenericPayload"/>
				<camel:to uri="activemq:packetPayloads" />
			</camel:split>
		</camel:route>
		
		<camel:route>
			<camel:from uri="activemq:packetPayloads" />
			<camel:to uri="bean:payload-codec?method=decode" />
			<camel:to uri="activemq:topic:parameterGroups" />
		</camel:route>
		
		<camel:route>
			<camel:from uri="activemq:topic:parameterGroups?concurrentConsumers=1&amp;maxConcurrentConsumers=1"></camel:from>
			<camel:to uri="bean:parameterArchiver?method=archiveParameter"></camel:to>
		</camel:route>
		
		<camel:route>
			<camel:from uri="activemq:topic:parameterGroups" />
			<camel:marshal><camel:json/></camel:marshal>		
			<camel:to uri="netty:udp://localhost:11000" />
		</camel:route>
	</camelContext>
	
</beans>
